// JavaScript version using word2vec and cosine similarity
// Assumes you're using Node.js with a vector library like ml-distance or manually implemented cosine similarity

const tf = require('@tensorflow/tfjs');

// Sample data (replace with your full co-purchase data)
const coPurchaseData = 
[ [97,86],[188,9],[189,7],[2,97,63,188],[2,97,63,188],[97,9],[59,63],[97,96],[86,83],[86,83],[28,28,76,55,63],[86,83],[86,83],[86,83],[9,83],[9,7],[13,11],[63,97],[5,63],[203,13],[13,203],[14,13],[44,42,17],[203,13],[203,13],[203,9],[2,34],[9,97],[9,13],[9,13],[31,33],[188,63],[188,63],[3,4],[4,7],[3,6],[22,23],[6,7],[218,21],[22,23],[6,9],[9,16,17,19],[16,3],[3,17],[17,3],[14,13],[14,59,88],[4,6,36],[14,62,36],[14,62,36],[2,63],[2,80],[3,80],[524,5,9],[1,3,5,524],[1,3,5,524],[524,24,36,29,16,47],[42,66],[28,191],[28,191],[3,5],[5,188,3,188],[36,2,75],[218,65],[20,86],[20,86],[20,180],[9,524,12,41,53,62,63,16],[36,66,69],[11,28,36,31],[2,3],[42,171],[1,4,6],[60,55,34],[19,13,14,9,8,23,24,28,34,30,47,57,62,60],[21,101],[8,13,64,48],[56,20],[63,36],[24,23,188],[23,24,188],[17,218,27,50],[14,36],[36,14],[59,218],[60,48,170],[181,57],[22,67],[20,30],[54,67],[4,6],[21,32,8],[54,62],[29,60],[21,27],[20,222],[23,16],[38,39],[27,220],[27,29],[21,53],[55,4],[66,55,1231],[8,24],[57,62],[28,40],[13,12],[59,60],[24,39],[56,55],[20,72],[2,24],[70,52,36,220,55,47],[44,4],[44,4],[44,41],[21,59],[3,24,21],[3,24,21],[53,23],[52,6],[2,4],[14,192],[14,20,30],[30,60],[1,2],[23,101],[23,101],[28,29],[3,174],[21,27,59],[70,13],[24,36],[170,28,36,71],[28,29],[20,28,71],[70,31],[2,31,70],[14,220,101],[27,29,36,24,8],[32,57],[13,33],[12,18,27],[12,18,27],[23,51,55],[1231,25],[3,34],[27,24,34],[61,69],[1,6],[31,44,59],[17,24],[18,27],[12,40,171],[12,28],[30,36,8],[11,44],[2,3],[42,23],[2,6,4],[55,222],[55,222],[39,29],[26,86,34,17,90,88,42,36,29],[72,66],[6,12],[18,25],[24,52],[4,6],[4,6],[63,220,30],[32,59,77,96,14],[3,30,31],[4,20,27],[4,20,27],[4,6,27],[29,64,101,82,14],[9,13,18,27,43],[54,32,64,11,205],[44,171],[16,20],[24,30,36,38,59,22,26],[59,24],[13,101],[191,13,18],[63,44,13,36],[62,42],[6,2,4],[4,2,6],[3,2],[2,3,6,101],[4,2],[63,8],[27,42],[27,42],[44,63,64],[28,44,29],[84,97,89,28,44,29],[13,20],[63,13],[15,100,72],[46,36],[15,20,84],[59,37,222,26,46,68],[59,64],[28,29],[14,42],[14,42],[42,12],[67,73,1223,10],[10,67,73,1223],[4,3,28],[14,18],[29,52],[11,12,188],[32,42,47,3,4,24],[4,3,24,42,29,32],[3,170],[20,74,36,42],[52,2,31],[54,50,29,26,17,1223],[62,69,46,188],[59,73],[59,16,30],[14,2,59],[20,36],[9,2],[36,42],[7,27],[4,27],[40,13],[11,27],[4,63,2,54],[48,62,57],[27,18,54],[59,57],[36,63,70,44,32],[20,22,86],[24,188,30],[32,39],[37,56],[59,36,76],[8,14],[2,52],[59,30,38],[30,57,188],[32,48,60],[3,61],[20,47,170],[22,18],[22,18],[59,2,30,57],[15,33],[15,34,37],[3,11,23],[42,50,220,20,73,36],[42,45],[12,13],[3,62],[2,101],[59,3],[13,11],[23,1231],[28,30,36],[57,65],[13,29],[52,10,46],[27,29],[11,27],[2,4],[18,17,15,27,53,1239],[6,2],[12,23,100],[14,23,100],[61,188,36],[188,36,61],[65,50,54,42,22,23],[24,30],[6,4],[4,6],[9,17,41,15],[61,27],[59,22],[30,59],[4,2],[21,54],[42,64,36,24],[38,9],[25,36],[28,39,14],[14,35],[14,35],[5,12,4],[65,93,6],[65,34],[47,42],[2,44,90,173,1223,27],[13,32],[13,32],[15,36],[188,38],[188,51],[188,38],[188,42],[19,55],[19,55],[2,76],[42,203,209],[29,36],[42,188,27,83],[42,188,27,83],[57,30],[30,83,171,42],[42,30,83,171],[42,173],[50,173,70],[3,101],[20,83],[16,78,83],[16,78,83],[59,37,4,35],[59,37,4,35],[17,188],[17,188],[59,57],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[14,173],[29,72,83],[11,99],[14,173],[14,9],[4,5,6,7,38,59,47,42,29,54,55],[174,42],[174,42],[174,42],[174,42],[11,24,38,62],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[58,57,59,54,64,33,29],[33,29,57,59,64,15,16,54],[65,2],[65,2],[23,38,183],[23,38,183],[11,57,14,28],[11,57,14,28],[27,56,46,38],[19,173,18],[19,173,18],[19,173,18],[73,13],[63,170],[27,58],[18,218],[188,54,11],[57,90],[179,31],[179,31],[179,31],[179,31],[179,31],[8,34,66,57,1231,122,173],[177,2],[6,7],[57,173],[42,173],[4,11],[20,36,197,177,171],[32,27],[72,68],[42,70,1231,86,83],[75,4],[42,170,177],[192,57,172,174,42],[188,1224,18],[188,1224,18],[36,128],[6,4,174],[4,6,174],[63,90],[14,15,83],[14,15,83],[98,30],[98,30],[188,4826,38],[23,38,39,48,54,65],[13,75],[13,75],[188,36],[188,36],[188,36],[188,36],[188,36],[188,36],[188,36],[188,36],[188,36],[188,36],[54,12,83,99,65],[188,42],[101,36],[29,181],[18,31,220,54],[63,36,54],[26,24,188],[42,71],[47,50,4],[11,178],[11,178],[188,1231,1222],[188,1231,1222],[188,1231,1222],[12,31,84,180],[170,171],[57,39,38,54,222],[57,39,38,54,222],[59,57],[61,4,6,83,103],[13,30],[188,46,59,68],[13,9],[13,188],[13,188],[44,70,100],[33,35,46],[33,35,46],[59,63,20,28,40,41],[59,63,20,28,40,41],[59,63,20,28,40,41],[59,173,104],[6,8],[13,42,28,188,83,101],[13,42,28,188,83,101],[73,76,101],[73,76,101],[1837,101],[39,46,54],[14,24],[14,24],[59,9,57],[54,83,188],[28,39],[61,83],[61,83],[27,50],[14,1837,25],[11,23,36,42,62,1223,27],[44,68,1227,202],[44,68,1227,202],[5,4,7],[3,84,83],[3,84,83],[3,84,83],[3,84,83],[3,84,83],[64,59],[8,54,87],[8,54,87],[63,54],[63,54],[15,72,44],[15,72,44],[1448,83],[42,13],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[63,64,56,50],[42,38,11,9,13],[42,38,11,9,13],[42,38,11,9,13,42,38,11,9,13],[42,38,11,9,13,42,38,11,9,13],[42,38,11,9,13,42,38,11,9,13],[18,27],[18,27],[18,27],[18,27],[18,27],[18,27],[18,27,18,18,18,18,18,27,18,27,18,27,18,27,18,27],[18,27],[18,27],[38,203,197],[36,58,16],[36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16,36,36,58,16],[36,58,16],[36,58,16],[36,58,16,36,36,36,36,36,36,36,36,36,36,36,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16],[36,58,16,36,36,36,36,36,36,36,36,36,36,36,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16,36,58,16,36,36,58,16],[16,36,58],[100,11,13,83],[65,26],[65,26],[220,70],[18,26,16,174],[1,2]]

// Build word2vec-style embeddings (mocked for demo)
class SimpleWord2Vec {
  constructor(data, vectorSize = 50, window = 5) {
    this.vectorSize = vectorSize;
    this.vocab = new Set();
    data.forEach(sequence => sequence.forEach(token => this.vocab.add(token)));
    this.vocab = Array.from(this.vocab);

    // Random vector initialization for demo purposes
    this.embeddings = {};
    this.vocab.forEach(token => {
      this.embeddings[token] = tf.randomNormal([vectorSize]);
    });
  }

  getEmbedding(token) {
    return this.embeddings[token];
  }

  cosineSimilarity(vec1, vec2) {
    const dotProduct = tf.dot(vec1, vec2);
    const norm1 = tf.norm(vec1);
    const norm2 = tf.norm(vec2);
    return dotProduct.div(norm1.mul(norm2)).arraySync();
  }

  mostSimilar(queryToken, topN = 10) {
    if (!this.embeddings[queryToken]) {
      return `Token ${queryToken} not found.`;
    }
    const similarities = this.vocab.map(token => {
      if (token === queryToken) return null;
      const sim = this.cosineSimilarity(this.embeddings[queryToken], this.embeddings[token]);
      return { token, similarity: sim };
    }).filter(Boolean);

    return similarities.sort((a, b) => b.similarity - a.similarity).slice(0, topN);
  }
}

// Example usage
const model = new SimpleWord2Vec(coPurchaseData);
const queryId = "26";
console.log(`Top items similar to ${queryId}:`);
console.log(model.mostSimilar(queryId));
